import os
import streamlit as st
from groq import Groq

st.set_page_config(
    page_title="AI Coder",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

CUSTOM_PROMPT ="""
Voc√™ √© o "IA Coder", um assistente de IA especialista em programa√ß√£o, com foco principal em Python. Sua miss√£o √© ajudar desenvolvedores iniciantes com d√∫vidas de programa√ß√£o de forma clara, precisa e √∫til.

REGRAS DE OPERA√á√ÉO:
1.  **Foco em Programa√ß√£o**: Responda apenas a perguntas relacionadas a programa√ß√£o, algoritmos, estruturas de dados, bibliotecas e frameworks. Se o usu√°rio perguntar sobre outro assunto, responda educadamente que seu foco √© exclusivamente em auxiliar com c√≥digo.
2.  **Estrutura da Resposta**: Sempre formate suas respostas da seguinte maneira:
    * **Explica√ß√£o Clara**: Comece com uma explica√ß√£o conceitual sobre o t√≥pico perguntado. Seja direto e did√°tico.
    * **Exemplo de C√≥digo**: Forne√ßa um ou mais blocos de c√≥digo em Python com a sintaxe correta. O c√≥digo deve ser bem comentado para explicar as partes importantes.
    * **Detalhes do C√≥digo**: Ap√≥s o bloco de c√≥digo, descreva em detalhes o que cada parte do c√≥digo faz, explicando a l√≥gica e as fun√ß√µes utilizadas.
    * **Documenta√ß√£o de Refer√™ncia**: Ao final, inclua uma se√ß√£o chamada "üìö Documenta√ß√£o de Refer√™ncia" com um link direto e relevante para a documenta√ß√£o oficial da Linguagem Python (docs.python.org) ou da biblioteca em quest√£o.
3.  **Clareza e Precis√£o**: Use uma linguagem clara. Evite jarg√µes desnecess√°rios. Suas respostas devem ser tecnicamente precisas.
"""

with st.sidebar:
    st.title("ü§ñ AI Coder")
    st.markdown("Um assistente de IA focado em program√ß√£o Python para ajudar iniciantes.")

    groq_api_key = st.text_input(
        "Insira sua API Key Groq",
        type="password",
        help="Obtenha sua chave em https://console.groq.com/keys"
    )

    st.markdown("___")

st.title("AI Coder")
st.title("Assistente Pessoal de programa√ß√£o Python üêç")
st.caption("Fa√ßa sua pergunta sobre Linguagem Python e obtenha c√≥digo, explica√ß√µes e refer√™ncias.")

if "messages" not in st.session_state:
    st.session_state.messages = []

for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

client = None

if groq_api_key:
    try:
        client = Groq(api_key = groq_api_key)
    except Exception as e:
        st.sidebar.error(e)
        st.stop()

elif st.session_state.messages:
    st.warning("Por favor, insira sua API Key Groq na barra lateral para continuar.")

if prompt := st.chat_input("Qual sua d√∫vida sobre Python?"):
    if client is None:
        st.warning("Por favor, insira sua API Key Groq na barra lateral para continuar.")
        st.stop()

    st.session_state.messages.append({"role": "user", "content": prompt})

    with st.chat_message("user"):
        st.markdown(prompt)

    messages_for_api = [{"role": "system", "content": CUSTOM_PROMPT}]
    for message in st.session_state.messages:
        messages_for_api.append(message)

    with st.chat_message("assistant"):
        with st.spinner("Analisando sua pergunta..."):
            try:
                chat_completion = client.chat.completions.create(
                    messages=messages_for_api,
                    model="openai/gpt-oss-20b",
                    temperature=0.7,
                    max_tokens=2048,
                )

                ai_resposta = chat_completion.choices[0].message.content

                st.markdown(ai_resposta)

                st.session_state.messages.append({"role": "assistant", "content": ai_resposta})

            except Exception as e:
                st.error(e)
